name: Tests on Main

on:
  push:
    branches: [main]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    env:
      ENVIRONMENT: MAIN-TEST-CI
      LOKI_URL: ${{ secrets.LOKI_URL }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 5s
          --health-retries 20
        ports:
          - 5432:5432

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping" 
          --health-interval 1s 
          --health-timeout 2s 
          --health-retries 20
        ports:
          - 6379:6379

      timescale:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: ${{ secrets.TIMESCALE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TIMESCALE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 2s
          --health-retries 20
        ports:
          - 5433:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv pip install -r requirements-top-level.txt

      - name: Install pyright
        run: uv pip install pyright==1.1.398

      - name: Run Pyright type checking
        run: pyright

      - name: Running sql scripts MAIN
        run: |
          for file in sql_scripts/main/*.sql; do
            if ! psql -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} -d postgres -a -f "$file"; then
                echo "Failed to run $file"
                exit 1
            fi
          done
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Running sql scripts TIMESCALE
        run: |
          for file in sql_scripts/timescale/*.sql; do
            if ! psql -h localhost -p 5433 -U ${{ secrets.TIMESCALE_USER }} -d postgres -a -f "$file"; then
                echo "Failed to run $file"
                exit 1
            fi
          done
        env:
          PGPASSWORD: ${{ secrets.TIMESCALE_PASSWORD }}

      - name: Create database tables
        run: LITESTAR_APP=SimplyTransport.app:create_app litestar create_tables

      - name: Populate GTFS test data
        run: echo "y" | LITESTAR_APP=SimplyTransport.app:create_app litestar importgtfs -dir ./tests/gtfs_test_data/TFI/

      - name: Populate Statistics
        run: LITESTAR_APP=SimplyTransport.app:create_app litestar generatestatistics

      - name: Install dev dependencies
        run: uv pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: coverage run --branch -m pytest

      - name: Create coverage reports
        run: coverage html --show-contexts && coverage xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: -Dsonar.projectKey=SimplyTransport
            -Dsonar.organization=simplytransport
            -Dsonar.python.version=${{ matrix.python-version }}
